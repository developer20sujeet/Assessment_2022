
===============================================================================================================================
1. EF Core library 
Install-Package Microsoft.EntityFrameworkCore -Version 3.1.1
Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 3.1.1
Install-Package Microsoft.EntityFrameworkCore.Tools -Version 3.1.1

EntityFrameworkCore.Tools 
--contains tools for building and deploying migrations to your database.

EntityFrameworkCore.SqlServer 
--package as it contains some SqlServer functionality


2. Register DB connection 
	var connectionString = Configuration["ConnectionStrings:DBConnectionString"];
	services.AddDbContext<InventoryContext>(o => o.UseSqlServer(connectionString));

===============================================================================================================================
3 Swager 
--Swagger is the best Open API for documenting the Restful API
--https://code-maze.com/swagger-ui-asp-net-core-web-api/

Swashbuckle.AspNetCore.Swagger
--This contains the Swagger object model and the middleware to expose SwaggerDocument objects as JSON.

Swashbuckle.AspNetCore.SwaggerGen
--Swagger Generator for APIs built on ASP.NET Core
--A Swagger Generator that builds Swagger Document Objects Directly from your routes controllers and models

Swashbuckle.AspNetCore.SwaggerUI
--Middleware to expose an embedded version of the swagger-ui from an ASP.NET Core application
--An embedded version of the Swagger UI tool. It interprets Swagger JSON to build a rich, customizable experience for describing the web API functionality.

Starup setting 
--public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
           
           // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
            })
        }
-- public void ConfigureServices(IServiceCollection services)
        {
           // Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });
            });

        }

--add <remarks> element to the documentation. 
    /// <summary>
    /// Creates an Employee.
    /// </summary>
    /// <remarks>
    /// Sample request:
    /// 
    ///     POST api/Employee
    ///     {        
    ///       "firstName": "Mike",
    ///       "lastName": "Andrew",
    ///       "emailId": "Mike.Andrew@gmail.com"        
    ///     }
    /// </remarks>
    /// <param name="employee"></param> 

===============================================================================================================================